---
- name: "Getting existing disks"
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      lsblk -nr | grep disk | cut -d' ' -f1
    executable: "/bin/bash"
  register: "disks_output"
  changed_when: false

- name: "Creating partition on new disks"
  community.general.parted:
    device: "/dev/{{ item }}"
    number: 1
    label: "gpt"
    flags: ["lvm"]
    state: "present"
  loop: "{{ disks_output.stdout_lines }}"
  register: "parted_output"

- name: "Getting existing partitions"
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      lsblk -nr | grep part | cut -d' ' -f1
    executable: "/bin/bash"
  register: "partitions_output"
  changed_when: false

- name: "Filtering out partitions to ignore"
  ansible.builtin.set_fact:
    filtered_partitions: >-
      {{
        partitions_output.stdout_lines |
        reject('match', '^sda[1-2]') |
        list
      }}

- name: "Concatenating each partition with the '/dev/???' prefix"
  ansible.builtin.set_fact:
    partition_list: "{{ filtered_partitions | map('regex_replace', '^', '/dev/') | list }}"

- name: "Converting the array to a string so it can be used to create volume groups"
  ansible.builtin.set_fact:
    partitions_single_line: "{{ partition_list | join(',') }}"

- name: "Extending volume group"
  community.general.lvg:
    vg: "{{ vg_name }}"
    pvs: "{{ partitions_single_line }}"
    pvresize: true
  register: "lvg_output"

- name: "Creating logical volumes"
  community.general.lvol:
    vg: "{{ vg_name }}"
    lv: "{{ item.name }}"
    size: "{{ item.size }}"
    resizefs: true
    shrink: false
    state: "present"
  loop: "{{ lvm }}"
  register: "lvol_output"

- name: "Creating filesystems on logical volumes"
  community.general.filesystem:
    fstype: "{{ item.filesystem_type }}"
    dev: "/dev/{{ vg_name }}/{{ item.name }}"
    state: "present"
  loop: "{{ lvm }}"
  register: "filesystem_output"
